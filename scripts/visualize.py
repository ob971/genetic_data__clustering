# scripts/visualize.py

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import os
import argparse

def plot_optimal_clusters(data, output_path):
    """
    Plots the clusters in the PCA space using the first two principal components.

    Parameters:
    - data (DataFrame): PCA-transformed data with cluster assignments.
    - output_path (str): Path to save the plot image.
    """
    plt.figure(figsize=(10,8))
    sns.scatterplot(data=data, x='PC1', y='PC2', hue='Cluster', palette='viridis', alpha=0.6)
    plt.title('Optimal Clusters in PCA Space')
    plt.savefig(output_path)
    plt.close()
    print(f"Optimal clusters plot saved to {output_path}")

def plot_cluster_distribution(data, output_path):
    """
    Plots the distribution of Disease_Status across different clusters.

    Parameters:
    - data (DataFrame): Data with cluster assignments and Disease_Status.
    - output_path (str): Path to save the plot image.
    """
    plt.figure(figsize=(10,8))
    sns.countplot(data=data, x='Cluster', hue='Disease_Status', palette='Set2')
    plt.title('Disease Status Distribution Across Clusters')
    plt.savefig(output_path)
    plt.close()
    print(f"Cluster distribution plot saved to {output_path}")

def plot_silhouette_scores(plot_path):
    """
    Since silhouette_scores.png is already generated by cluster.py, this function can be optional
    or used to add additional visualizations related to silhouette scores if needed.
    """
    pass  # Placeholder for any additional silhouette score visualizations

def visualize_clusters(clusters_path, optimal_clusters_plot, cluster_distribution_plot):
    """
    Orchestrates the visualization process.

    Parameters:
    - clusters_path (str): Path to the clusters.csv file.
    - optimal_clusters_plot (str): Path to save the optimal clusters plot.
    - cluster_distribution_plot (str): Path to save the cluster distribution plot.
    """
    # Load clusters data
    data = pd.read_csv(clusters_path)
    print(f"Loaded clusters data with shape: {data.shape}")

    # Plot optimal clusters
    plot_optimal_clusters(data, optimal_clusters_plot)

    # Plot cluster distribution
    plot_cluster_distribution(data, cluster_distribution_plot)

def main():
    parser = argparse.ArgumentParser(description="Visualize clustering results.")
    parser.add_argument('--clusters', type=str, default='outputs/clusters.csv', help='Path to clusters.csv file.')
    parser.add_argument('--optimal_plot', type=str, default='outputs/optimal_clusters.png', help='Path to save optimal clusters plot.')
    parser.add_argument('--distribution_plot', type=str, default='outputs/cluster_distribution.png', help='Path to save cluster distribution plot.')

    args = parser.parse_args()

    visualize_clusters(args.clusters, args.optimal_plot, args.distribution_plot)

if __name__ == "__main__":
    main()
